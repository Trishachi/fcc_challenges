//NOTES
// In Sass, a mixin is a group of CSS declarations that can be reused throughout the style sheet.
// Mixins are like functions for CSS
// A mixin is called with the @include directive:
//The @if directive in Sass is useful to test for a specific case - it works just like the if statement in JavaScript.
//And just like in JavaScript, @else if and @else test for more conditions:
//The @for directive adds styles in a loop, very similar to a for loop in JavaScript.
// The @while directive is an option with similar functionality to the JavaScript while loop. It creates CSS rules until a condition is met.
//Partials in Sass are separate files that hold segments of CSS code. These are imported and used in other Sass files. This is a great way to group similar code into a module to keep it organized.
//Sass has a feature called extend that makes it easy to borrow the CSS rules from one element and build upon them in another.


//Codes
// Sass: Store Data with Sass Variables
// Create a variable $text-color and set it to red.
// Then change the value of the color property for the
// .blog-post and h2 to the $text-color variable.
// <style type='text/sass'>
// $text-color: red;

//   .header{
//     text-align: center;
//   }
//   .blog-post, h2 {
//     color: $text-color;
//   }
// </style>

// <h1 class="header">Learn Sass</h1>
// <div class="blog-post">
//   <h2>Some random title</h2>
//   <p>This is a paragraph with some random text in it</p>
// </div>
// <div class="blog-post">
//   <h2>Header #2</h2>
//   <p>Here is some more random text.</p>
// </div>
// <div class="blog-post">
//   <h2>Here is another header</h2>
//   <p>Even more random text within a paragraph</p>
// </div>

// Sass: Nest CSS with SassPassed
// Use the nesting technique shown above to re-organize
// the CSS rules for both children of .blog-post element.
// For testing purposes, the h1 should come before the p element.
// <style type='text/sass'>
//   .blog-post {
//     h1 {
//     text-align: center;
//     color: blue;
//   }
//   p {
//     font-size: 20px;
//   }
// }
// </style>
// <div class="blog-post">
//   <h1>Blog Title</h1>
//   <p>This is a paragraph</p>
// </div>

// Sass: Create Reusable CSS with MixinsPassed
// Write a mixin for border-radius and give it a $radius parameter.
// It should use all the vendor prefixes from the example.
// Then use the border-radius mixin to give the #awesome element a border radius of 15px.
// <style type='text/sass'>
// @mixin border-radius($radius){
//   -webkit-border-radius: $radius;
//   -moz-border-radius: $radius;
//   -ms-border-radius: $radius;
//   border-radius: $radius;
// }
// #awesome {
//     width: 150px;
//     height: 150px;
//     background-color: green;
//     @include border-radius(15px);
//   }
// </style>

// <div id="awesome"></div>

// sass: Use @if and @else to Add Logic To Your StylesPassed;
// Create a mixin called border-stroke that takes a parameter $val. The mixin should check for the following conditions using @if, @else if, and @else:
// light - 1px solid black
// medium - 3px solid black
// heavy - 6px solid black
// If $val is not light, medium, or heavy, the border should be set to none.
// <style type='text/sass'>
// @mixin border-stroke($val){
//   @if $val == light {
//     border: 1px solid black;
//   }
//   @else if $val == medium {
//     border: 3px solid black;
//   }
//   @else if $val == heavy {
//     border: 6px solid black;
//   }
//   @else {
//     border: none;
//   }
// }

//   #box {
//     width: 150px;
//     height: 150px;
//     background-color: red;
//     @include border-stroke(light);
//   }
// </style>
// <div id="box"></div>

// Sass: Use @for to Create a Sass Loop
// Write a @for directive that takes a variable $j that goes from 1 to 6.
// It should create 5 classes called .text-1 to .text-5 where each has a
// font-size set to 15px multiplied by the index.
// <style type='text/sass'>
// @for $j from 1 to 6{
//   .text-#{$j} { font-size: 15px * $j; }
// }
// </style>

// <p class="text-1">Hello</p>
// <p class="text-2">Hello</p>
// <p class="text-3">Hello</p>
// <p class="text-4">Hello</p>
// <p class="text-5">Hello</p>

// Sass: Use @each to Map Over Items in a List
// Write an @each directive that goes through a list:
// blue, black, red and assigns each variable to a .color-bg class,
// where the "color" part changes for each item.
// Each class should set the background-color the respective color.
// <style type='text/sass'>
// $colors: (color1: blue, color2: black, color3: red);
//
// @each $key, $color in $colors{
//   .#{$color}-bg {background-color: $color;}
//   }
//
//   div {
//     height: 200px;
//     width: 200px;
//   }
// </style>
//
// <div class="blue-bg"></div>
// <div class="black-bg"></div>
// <div class="red-bg"></div>

// Sass: Apply a Style Until a Condition is Met with @while
// Use @while to create a series of classes with different font-sizes.
// There should be 5 different classes from text-1 to text-5.
// Then set font-size to 15px multiplied by the current index number.
// Make sure to avoid an infinite loop!
// <style type='text/sass'>
//   $x: 1;
//   @while $x < 6 {
//     .text-#{$x} { font-size: 15px * $x;}
//     $x: $x + 1;
//   }
// </style>
// <p class="text-1">Hello</p>
// <p class="text-2">Hello</p>
// <p class="text-3">Hello</p>
// <p class="text-4">Hello</p>
// <p class="text-5">Hello</p>

// Sass: Split Your Styles into Smaller Chunks with Partials
// Write an @import statement to import a partial named _variables.scss into the main.scss file.
// The main.scss file
// @import 'variables'

// Sass: Extend One Set of CSS Styles to Another Element
//Make a class .info-important that extends .info and also has a background-color set to magenta.
<style type='text/sass'>
  h3{
    text-align: center;
  }
  .info{
    width: 200px;
    border: 1px solid black;
    margin: 0 auto;
  }
  .info-important {
    @extend .info;
    background-color: magenta;
  }

</style>
<h3>Posts</h3>
<div class="info-important">
  <p>This is an important post. It should extend the class ".info" and have its own CSS styles.</p>
</div>

<div class="info">
  <p>This is a simple post. It has basic styling and can be extended for other uses.</p>
</div>
